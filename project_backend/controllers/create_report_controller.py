from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from django.http import HttpResponse

def generate_pdf_report(request):
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Function to create paragraphs
    def draw_paragraph(text, x, y, p, line_height=14):
        lines = text.split('\n')
        for line in lines:
            p.drawString(x, y, line.strip())
            y -= line_height
        return y

    # Report Header
    p.setFont("Helvetica-Bold", 16)
    p.drawString(100, height - 50, "Alert Summary Report")

    p.setFont("Helvetica", 12)
    p.drawString(100, height - 100, "Date Range: (Start Date) - (End Date)")
    p.drawString(100, height - 120, "Generated On: (Current Date)")
    p.drawString(100, height - 140, "Generated By: (System/User Name)")

    # Executive Summary
    p.setFont("Helvetica-Bold", 14)
    p.drawString(100, height - 170, "Executive Summary")
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Overview: A brief overview of the report's purpose.\nKey Findings: Highlight critical alerts and notable trends.\nRecommendations: Suggested actions based on the report findings.", 100, height - 190, p)

    # Alert Overview
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Alert Overview", 100, y - 20, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Total Alerts: Total number of alerts generated during the period.\nHigh Priority Alerts: Number and percentage of high-priority alerts.\nMedium Priority Alerts: Number and percentage of medium-priority alerts.\nLow Priority Alerts: Number and percentage of low-priority alerts.", 100, y - 10, p)

    # Alerts by Category
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Alerts by Category", 100, y - 20, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Environmental Alerts:\n  - Air Quality Warnings\n  - River Discharge Alerts\n  - Weather Warnings\nHealth Alerts:\n  - High Activity Levels\n  - Unusual Vital Signs\nSecurity Alerts:\n  - Unauthorized Access\n  - Object/Person Recognition Matches", 100, y - 10, p)

    # Alerts by Location
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Alerts by Location", 100, y - 20, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Summary: Overview of alerts by location (e.g., city, region).\nDetailed Breakdown:", 100, y - 10, p)
    
    # Table for Alerts by Location
    data = [
        ["Location", "Total Alerts", "High Priority", "Medium Priority", "Low Priority"],
        ["Location 1", "50", "10", "20", "20"],
        ["Location 2", "30", "5", "15", "10"],
    ]
    x = 100
    y = y - 20
    for row in data:
        for col in row:
            p.drawString(x, y, col)
            x += 120
        y -= 20
        x = 100

    # Alerts by Time
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Alerts by Time", 100, y - 40, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Summary: Overview of alerts over time (e.g., daily, weekly, monthly).\nDetailed Breakdown: Chart showing the trend of alerts over the specified period.", 100, y - 10, p)

    # Detailed Alert List
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Detailed Alert List", 100, y - 20, p)
    p.setFont("Helvetica", 12)
    
    # Table for Detailed Alert List
    detailed_alerts = [
        ["Date & Time", "Category", "Priority", "Description", "Location", "Status"],
        ["2023-04-11 10:00", "Environmental", "High", "Air quality exceeds safe limits", "Location 1", "Resolved"],
        ["2023-04-12 14:30", "Security", "Medium", "Unauthorized access detected", "Location 2", "Unresolved"],
        ["2023-04-13 09:15", "Health", "Low", "High activity level detected", "Location 3", "In Progress"],
    ]
    x = 100
    y = y - 20
    for row in detailed_alerts:
        for col in row:
            p.drawString(x, y, col)
            x += 120
        y -= 20
        x = 100

    # Alert Response Actions
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Alert Response Actions", 100, y - 40, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Summary: Overview of actions taken in response to alerts.\nDetailed Actions: Table or list detailing specific actions for high-priority alerts.", 100, y - 10, p)

    # Conclusions and Recommendations
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Conclusions and Recommendations", 100, y - 40, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Summary of Findings: Key takeaways from the alert data.\nRecommendations: Suggested actions to improve response times and reduce future alerts.\nNext Steps: Planned actions for continued monitoring and system improvements.", 100, y - 10, p)

    # Appendices
    p.setFont("Helvetica-Bold", 14)
    y = draw_paragraph("Appendices", 100, y - 40, p)
    p.setFont("Helvetica", 12)
    y = draw_paragraph("Definitions: Definitions of terms and categories used in the report.\nMethodology: Explanation of how the data was collected and analyzed.\nAdditional Charts/Tables: Any additional supporting data or visualizations.", 100, y - 10, p)

    p.save()

    buffer.seek(0)
    return HttpResponse(buffer, content_type='application/pdf')
